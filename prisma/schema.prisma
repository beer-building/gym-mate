// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Used for session management in telegram bot
model Session {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model User {
  id                     Int                   @id @default(autoincrement())
  createdAt              DateTime              @default(now())
  email                  String?               @unique
  passwordHash           String?
  username               String                @default("")
  image                  String?
  isRegistered           Boolean               @default(false)
  chatId                 Int?                  @unique
  workoutPrograms        UserWorkoutPrograms[]
  // TODO: not used now
  createdWorkoutPrograms WorkoutProgram[]
}

model WorkoutProgram {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  createdBy           User                  @relation(fields: [userId], references: [id])
  userId              Int
  updatedAt           DateTime              @updatedAt
  title               String                @default("")
  description         String                @default("")
  workouts            Workout[]
  userWorkoutPrograms UserWorkoutPrograms[]
}

model UserWorkoutPrograms {
  user             User           @relation(fields: [userId], references: [id])
  userId           Int
  workoutProgram   WorkoutProgram @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId Int

  @@id([userId, workoutProgramId])
}

model Workout {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  title            String            @default("")
  workoutProgram   WorkoutProgram?   @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId Int?
  exercises        WorkoutExercise[]
}

model WorkoutExercise {
  id         Int      @id @default(autoincrement())
  workout    Workout  @relation(fields: [workoutId], references: [id])
  workoutId  Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  sets       Int      @default(0)
  reps       Int      @default(0)
  weight     Int      @default(0)
  rest       Int      @default(0)
}

model Exercise {
  id              Int               @id @default(autoincrement())
  title           String            @default("")
  description     String?           @default("")
  bodyLoad        BodyLoad[]
  workoutId       Int?
  WorkoutExercise WorkoutExercise[]
}

model BodyLoad {
  id         Int      @id @default(autoincrement())
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  muscle     Muscle
  value      Int      @default(0)
}

enum Muscle {
  // BACK_AND_NECK
  SMALL_OF_THE_BACK
  LATISSIMUS
  TRAPEZE
  NECK

  BUTTOCKS

  // ABS_AND_OBLIQUES
  ABS
  OBLIQUES

  // SHOULDERS
  FRONT_DELTA
  MIDDLE_DELTA
  REAR_DELTA

  // HANDS
  BICEPS
  TRICEPS
  FOREARMS

  CHEST

  // LEGS
  FRONT_THIGH
  POSTERIOR_THIGH
  INNER_THIGH
  OUTER_THIGH

  SHIN
}
