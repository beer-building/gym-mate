// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Used for session management in telegram bot
model Session {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model User {
  id           Int     @id @default(autoincrement())
  email        String? @unique
  passwordHash String?
  username     String  @default("")
  image        String?
  isRegistered Boolean @default(false)
  chatId       String? @unique

  workoutPrograms        UserWorkoutPrograms[]
  // TODO: not used now
  createdWorkoutPrograms WorkoutProgram[]

  createdAt DateTime @default(now())
}

model WorkoutProgram {
  id          Int    @id @default(autoincrement())
  title       String @default("")
  description String @default("")

  createdBy User @relation(fields: [userId], references: [id])
  userId    Int

  workouts            Workout[]
  userWorkoutPrograms UserWorkoutPrograms[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserWorkoutPrograms {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  workoutProgram   WorkoutProgram @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId Int

  @@id([userId, workoutProgramId])
}

model Workout {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @default("")

  workoutProgram   WorkoutProgram? @relation(fields: [workoutProgramId], references: [id])
  workoutProgramId Int?

  workoutExercises WorkoutExercise[]

  history WorkoutExerciseHistory[]
}

model WorkoutExercise {
  id Int @id @default(autoincrement())

  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId Int

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int

  sets   Int @default(0)
  reps   Int @default(0)
  weight Int @default(0)
  rest   Int @default(120)
}

model WorkoutExerciseHistory {
  id                Int @id @default(autoincrement())
  workoutExerciseId Int

  weight Int @default(0)
  reps   Int @default(0)
  sets   Int @default(0)

  createdAt DateTime @default(now())

  Workout Workout[]
}

model Exercise {
  id          Int        @id @default(autoincrement())
  title       String     @unique
  description String?    @default("")
  bodyLoad    BodyLoad[]

  workoutId       Int?
  WorkoutExercise WorkoutExercise[]
}

model BodyLoad {
  id     Int    @id @default(autoincrement())
  muscle Muscle
  value  Int    @default(0)

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
}

enum Muscle {
  // BACK_AND_NECK
  // TODO: RENAME TO LOWER BACK
  SMALL_OF_THE_BACK
  // TODO: RENAME TO LATS
  LATISSIMUS
  UPPER_BACK
  TRAPEZE
  NECK

  // TODO: RENAME TO GLUTES
  BUTTOCKS

  // ABS_AND_OBLIQUES
  ABS
  OBLIQUES

  // SHOULDERS
  FRONT_DELTA
  MIDDLE_DELTA
  REAR_DELTA

  // HANDS
  BICEPS
  TRICEPS
  FOREARMS

  CHEST

  // LEGS
  // TODO: RENAME TO QUADS
  FRONT_THIGH
  // TODO: RENAME TO Hamstrings
  POSTERIOR_THIGH
  // TODO: RENAME TO Adductors
  INNER_THIGH
  // TODO: RENAME TO Abductors???
  OUTER_THIGH

  SHIN
}

// TODO: implement later
// enum Equipment {
//   BARBELL
//   DUMBBELL
//   KETTLEBELL
//   CABLE
//   MACHINE
//   BODYWEIGHT
//   BAND
//   PLATE
//   BALL
//   BENCH
//   NONE
// }
